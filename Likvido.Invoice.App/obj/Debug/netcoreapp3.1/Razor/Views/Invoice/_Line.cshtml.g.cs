#pragma checksum "C:\Users\Onur\source\repos\Likvido\Likvido.Invoice.App\Views\Invoice\_Line.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "870beff45b3eeff70f167876bd512ffbdac35232"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Invoice__Line), @"mvc.1.0.view", @"/Views/Invoice/_Line.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Onur\source\repos\Likvido\Likvido.Invoice.App\Views\_ViewImports.cshtml"
using Likvido.Invoice.App;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Onur\source\repos\Likvido\Likvido.Invoice.App\Views\_ViewImports.cshtml"
using Likvido.Invoice.App.ViewModels;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"870beff45b3eeff70f167876bd512ffbdac35232", @"/Views/Invoice/_Line.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"597498af5eaa4d491b595d5c8ae1dee354ab3702", @"/Views/_ViewImports.cshtml")]
    public class Views_Invoice__Line : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<button type=""button"" class=""btn btn-success"" id=""btnNewLine"">New Line</button>

<table id=""tblLines"" class=""table table-bordered mt-3"">
    <thead>
        <tr>
            <th scope=""col"">Description</th>
            <th scope=""col"">Quantity</th>
            <th scope=""col"">Price Before VAT</th>
            <th scope=""col"">VAT Rate</th>
            <th scope=""col"">Total</th>
            <th scope=""col"">Remove</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td data-validation-required>
                <input type=""text"" class=""form-control"" />
                <span class=""text-danger d-none"" data-valmsg-replace=""true"">Description is required</span>
            </td>
            <td data-validation-required>
                <input type=""text"" class=""form-control"" value=""1"" />
                <span class=""text-danger d-none"" data-valmsg-replace=""true"">Quantity is required</span>
            </td>
            <td data-validation-required>
                <input type");
            WriteLiteral(@"=""text"" class=""form-control"" value=""0"" />
                <span class=""text-danger d-none"" data-valmsg-replace=""true"">Unit net price is required</span>
            </td>
            <td><input type=""text"" class=""form-control"" value=""25"" /> </td>
            <td><span></span> </td>
            <td><button class=""btn btn-danger"" onclick=""removeRow(event,this)"">Remove</button></td>
        </tr>
    </tbody>
</table>


<script>

    const defaultRow = document.getElementById(""tblLines"").rows[1].cloneNode(true);

    document.getElementById(""btnNewLine"").addEventListener(""click"", function () {
        addRow();
    })

    function validateLine() {
        let requiredFields = document.querySelectorAll(""td[data-validation-required]"");
        let isValid = true;

        for (let i = 0; i < requiredFields.length; i++) {

            let requiredInput = requiredFields[i].querySelector(""input"");

            if (requiredInput && requiredInput.value) {
                requiredFields[i].qu");
            WriteLiteral(@"erySelector(""span"").classList.add(""d-none"");

            }
            else {
                requiredFields[i].querySelector(""span"").classList.remove(""d-none"");
                isValid = false;
            }
        }

        return isValid;
    }

    function getLineArray() {

        var lineArray = [];
        var rows = document.getElementById(""tblLines"").rows;
        for (let i = 1; i < rows.length; i++) {

            let inputs = rows[i].getElementsByTagName(""input"");
            lineArray.push(
                {
                    UnitNetPrice: inputs[2].value,
                    Description: inputs[0].value,
                    Quantity: inputs[1].value,
                    VatRate: inputs[3].value,
                    DiscountType: 0,
                    DiscountValue: 0

                });
        }

        return lineArray;
    }

    function addRow() {
        let clone = defaultRow.cloneNode(true);
        document.getElementById(""tblLines"").tBodies[");
            WriteLiteral("0].appendChild(clone);\r\n    }\r\n\r\n    function removeRow(event, element) {\r\n        event.preventDefault();\r\n        element.closest(\"tr\").remove();\r\n    }\r\n\r\n\r\n    //$(function () {\r\n    //    $(\"#datepicker\").datepicker();\r\n    //});\r\n\r\n</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
